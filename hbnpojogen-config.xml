<?xml version="1.0" encoding="ISO-8859-1" ?>
<appconfig>
	<dbType>MYSQL</dbType>
	<driver>com.mysql.jdbc.Driver</driver>
    <jdbcConnectionString>jdbc:mysql://localhost:3306/entity_graph_demo</jdbcConnectionString>
	<databaseIP>localhost</databaseIP>
	<databasePort>3306</databasePort>
	<databaseCatalog>entity_graph_demo</databaseCatalog>
	<databaseSchema>entity_graph_demo</databaseSchema>
	<databaseUsername>demo</databaseUsername>
	<databasePassword>demo</databasePassword>
	<sourceTarget>/Users/rich/Desktop/pojo</sourceTarget>
	<projectName>jpademo</projectName>
	<topLevel>com.richthibault.jpademo</topLevel>
	<libPath>lib</libPath>
	<schemaStrategy>RESTRICT</schemaStrategy>
	<sourceFolderName>src/main/java</sourceFolderName>
	<testFolderName>src/test/java</testFolderName>

	<!-- Only used to store state, normally more relevant for your application.  -->
	<resourceFolder>src/main/resources</resourceFolder>
	
	<!-- Used to store log4j.properties. -->
	<testResourceFolder>src/test/resources</testResourceFolder>

	<applicationContextFilename>applicationContext.xml</applicationContextFilename>
	<disableCleanTables>true</disableCleanTables>
	<dbPackageMap>
	<map schema="DEFAULT">
		<!--  Location of hibernate objects. -->
		<objectPackage>${topLevel}</objectPackage>
		<!--  Location of interface for hibernate objects. -->
		<objectInterfacePackage>${topLevel}</objectInterfacePackage>

		<!--  Location of repository objects (spring data only)  -->
		<objectTableRepoPackage>
			${topLevel}
		</objectTableRepoPackage>

		<!--  Location of hibernate DAO objects.  -->
		<daoPackage>${topLevel}</daoPackage>
		<daoImplPackage>${topLevel}</daoImplPackage>
		<!--  Location of hibernate enum objects. -->
		<enumPackage>${topLevel}</enumPackage>

		<!--  Location of class subtype enum objects. -->
		<enumSubtypePackage>
			${topLevel}
		</enumSubtypePackage>

		<!--  Location of hibernate factory objects.  -->
		<factoryPackage>${topLevel}</factoryPackage>
		<!--  Location of data layer objects.  -->
		<dataPackage>${topLevel}</dataPackage>

		<!-- Location of assorted classes -->
		<utilPackage>
			${topLevel}
		</utilPackage>
			
	</map>
	</dbPackageMap>
	
	<enableJodaSupport>true</enableJodaSupport>
	<enableHibernateValidator>false</enableHibernateValidator>
	<enableSpringData>true</enableSpringData>
	<disableCleanTables>true</disableCleanTables>
	<springVersion>3</springVersion>

	<!-- Normally, column names are lowercased when generating properties.
	Set this option to true to disable that behavior - e.g., your columns are already in camelCase.  -->
	<preserveColumnCase>true</preserveColumnCase>
	
	<!-- may need this at some point.  meeting_segment_link?
	<linktables>
		<table name="yourcatalog.UserBillingMap">
			<link srcField="userId" dstField="billingId" />
		</table>
	</linktables>
-->

	<ignore>
		<!--<field>*.contact.email</field>-->
<!-- 		having trouble with this table....the JavaType comes up as a String.  Conflict with contact.email? -->
 		<table>*.email</table> 
	</ignore>

  <!-- 
  Setup your custom annotations using the <annotations> section
  classname eg: mycompany.Foo (don't use com.xon.mycompany.Foo, just use
  the schemaname in camelcase without underscores followed by your classname).
  You may also use wildcards in the classname definition eg *.yourclass, yourschema.* or *.* 
  -->

<!--   set up basic auditing -->
  <annotations>
    <class name="*.*">
      <imports>
        <import>javax.persistence.EntityListeners</import>
        <import>org.springframework.data.annotation.*</import>
        <import>org.springframework.data.jpa.domain.support.AuditingEntityListener</import>
      </imports>
      <classAnnotation>
        <![CDATA[
          @EntityListeners(AuditingEntityListener.class)
        ]]>
      </classAnnotation>
      <property name="createDate">
        <annotation type="property">@CreatedDate</annotation>
      </property>
    </class>

  </annotations>

  <equalityExcludes>
    <field>*.*.createDate</field>
  </equalityExcludes> 

</appconfig>